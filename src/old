#!/usr/bin/env python

import rospy
#import dreamer
#import tools
#import gym
import uuid
import io
import pathlib
import datetime
import numpy as np
from std_msgs.msg import Float32
from std_msgs.msg import Bool
from rl_server.msg import Episode
from heron_msgs.msg import Drive
from sensor_msgs.msg import Image

class DreamerAgent:
    def __init__(self):
        # DREAMER
        self.agent = None
        self.save_directory = '.'
        self.episode = {}
        #config = self.parse_dreamer_config()
        #datadir = config.logdir / 'episodes'
        self.Done = True
        self.random_agent = True
        self.reset = False
        self.agent_not_initialized = True
        self.setup_ok = False
        self.max_steps = 1000
        # ROS
        self.drive = Drive()
        self.action_pub_ = rospy.Publisher('/cmd_drive', Drive, queue_size=1)
        self.done_pub_ = rospy.Publisher('/agent/is_done', Bool, queue_size=1)
        rospy.Subscriber("/server/episode_manager", Episode, self.episodeCallback, queue_size=1)
        rospy.Subscriber("/server/sim_ok", Bool, self.restartCallback, queue_size=1)
        rospy.Subscriber("/reward_generator/DreamersView", Image, self.ImageCallback, queue_size=1)
        rospy.Subscriber("/reward_generator/reward", Float32, self.rewardCallback, queue_size=1)

    def initialize_agent(self, config, datadir):
        #datadir = 'dummy'
        #actspace = gym.spaces.Box(np.array([-1,-1]),np,array([1,1]))
        #self.agent = dreamer.Dreamer(config, datadir, actspace)
        #if (config.logdir / 'variables.pkl').exists():
        #    print('Load checkpoint.')
        #    self.agent.load(self.path2model)
        self.state = None

    def refresh_agent(self):
        self.state = None
        self.step = 0
        self.episode = {}
        #self.episode['vlin'] = []
        #self.episode['vrot'] = []
        #self.episode['laser'] = []
        self.episode['image'] = []
        self.episode['action'] = []
        self.episode['reward'] = []
        self.episode['discount'] = []
        #self.agent.load(self.path2model)
        self.Done = True
        self.reset = True

    def ImageCallback(self, obs):
        self.image = np.reshape(np.fromstring(obs.data, np.uint8),[64,64,3])
     	if not self.Done:
            #self.obs['image'] = obs
            #self.obs['reward'] = self.reward
            #print(self.step)
            if self.random_agent:
                actions = (np.random.rand(2) - 0.5)*2
            else:
                #self.state, actions = self.agent.policy(obs, self.state, self.training)
                pass
            self.action_pub_.publish(self.actions2Twist(actions))
            self.incrementEpisode(obs, actions, self.reward)
            self.actions = actions
            self.step += 1
            if self.step > self.max_steps:
                print('Done')
                self.saveEpisode()
                self.Done = True
                self.done_pub_.publish(True)
                
        if self.reset:
            print('resetting and commencing new episode')
            self.incrementEpisode(self.image, np.array([0.0,0.0]), 0)
            self.reset = False
            self.Done = False
    
    def rewardCallback(self, reward):
        if not self.Done:
            self.reward = reward.data

    def restartCallback(self, msg):
        if msg.data == True:
            print('sim is OK, waiting for agent...')
            while not(self.setup_ok):
                rospy.sleep(1)
            print('agent OK')
            self.setup_ok = False
            if ((not self.random_agent) and agent_not_initialized):
                self.initialize_agent()
            print('requesting refresh...')
            self.refresh_agent()
    
    def episodeCallback(self, msg):
        print('received new_episode settings')
        self.max_steps = msg.steps
        self.discount = msg.discount
        self.training_mode = msg.training
        self.random_agent = msg.random_agent
        self.setup_ok = True
        print('settings updated')

    def actions2Twist(self, actions):
        self.drive.left = np.array(actions)[0]
        self.drive.right = np.array(actions)[1]
        return self.drive
         
    def incrementEpisode(self, img, act, reward):
        #self.episode['vlin'].append(self.vlin)
        #self.episode['vrot'].append(self.rot)
        self.episode['image'].append(img)
        self.episode['action'].append(act)
        self.episode['reward'].append(reward)
        self.episode['discount'].append(self.discount) #Not sure what to put here

    def saveEpisode(self):
        print('saving episode')
        directory = pathlib.Path(self.save_directory)#.expanduser()
        try:
            directory.mkdir(parents=True)
        except:
            pass
        timestamp = datetime.datetime.now().strftime('%Y%m%dT%H%M%S')
        #for episode in episodes:
        identifier = str(uuid.uuid4().hex)
        length = len(self.episode['reward'])
        filename = directory / '{}-{}-{}.npz'.format(timestamp,identifier,length)
        with io.BytesIO() as f1:
            np.savez_compressed(f1, **self.episode)
            f1.seek(0)
            with filename.open('wb') as f2:
                f2.write(f1.read())

if __name__ == "__main__":
    rospy.init_node('dreamer_agent')
    DA = DreamerAgent()
    rospy.spin()

